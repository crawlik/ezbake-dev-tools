# EzBake specific macro definitions.
# To make use of these macros insert the following line into your spec file:
# %include %{_rpmconfigdir}/macros.ezbake

# Platform version. Bump when the rest of the platform gets bumped.
%define ezbake_version 2.1

# Last git revision in this copy of the project.
%define ezbake_git_shortrev %(git rev-parse --short HEAD)

# Timestamp, in seconds since epoch, of the last commit on this branch of this
# project, according to git.
%define ezbake_git_timestamp %(git log -1 --pretty=format:%ct)

# Datetime, in the same format as EzBake release notation (also happens to be
# the same as EzBake Maven plugin), of the last commit on this branch of the
# project, according to git.
%define ezbake_git_datetime %(date -d @`git log -1 --pretty=format:%ct` +%%Y%%m%%d%%H%%M%%S)

# The datetime that this rpm is being built
%define ezbake_build_datetime %(date -u +%%Y%%m%%d%%H%%M%%S)

# Release (typically a snapshot with a datetime). When making a real release
# (not a snapshot), override the macro.  The suggested mechanism is to override
# on the command line when calling rpmbuild, i.e.,
#
#       rpmbuild -ba -D 'ezbake_release 1' ...
#
# or whatever release number is appropriate.
#
# Defaults to a snapshot timestamped with the either the datetime of the last
# commit if a git repo or build datetime otherwise.
%if %(git rev-parse --git-dir 2> /dev/null | wc -l)
    %define ezbake_release SNAPSHOT%{ezbake_build_datetime}.%{ezbake_git_shortrev}
%else
    %define ezbake_release SNAPSHOT%{ezbake_build_datetime}
%endif
